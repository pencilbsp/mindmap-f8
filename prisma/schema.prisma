// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  mindmaps            Mindmap[]
  mindmapsShareWithMe MindmapShare[]
  updatedAt           DateTime       @updatedAt
  createdAt           DateTime       @default(now())
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Position {
  top
  left
  right
  bottom
}

// model MindmapNode {
//   id             String    @id @default(uuid())
//   data           Json
//   type           String
//   selected       Boolean?
//   width          Int?
//   height         Int?
//   position       String
//   sourcePosition Position?
//   targetPosition Position?
//   mindmapId      String
//   mindmap        Mindmap   @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
// }

// model MindmapEdge {
//   id           String   @id @default(uuid())
//   type         String
//   label        String?
//   selected     Boolean?
//   source       String
//   target       String
//   style        Json
//   data         Json?
//   sourceHandle String?
//   targetHandle String?
//   animated     Boolean?
//   mindmapId    String
//   mindmap      Mindmap  @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
// }

model Mindmap {
  id         String         @id @default(uuid())
  name       String?
  userId     String
  nodes      Json[]
  edges      Json[]
  autoSave   Boolean        @default(true)
  isPublic   Boolean        @default(false)
  allowEdit  Boolean        @default(false)
  user       User           @relation(fields: [userId], references: [id])
  shareWidth MindmapShare[]
  updatedAt  DateTime       @updatedAt
  createdAt  DateTime       @default(now())
}

model MindmapShare {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  mindmapId String
  mindmap   Mindmap  @relation(fields: [mindmapId], references: [id], onDelete: Cascade)
  allowEdit Boolean
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
